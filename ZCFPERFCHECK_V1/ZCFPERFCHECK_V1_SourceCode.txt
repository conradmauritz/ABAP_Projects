*&---------------------------------------------------------------------*
*& Report  ZCFPERFCHECK_V1
*&
*&---------------------------------------------------------------------*
*& Description:
*&   Collects performance related data for further analysis
*&
*&
*& Technical description:
*&
*& KPIs:
*&    Code Inspector output of Z programs
*&    Background job statistics related to extracted Z programs
*&    Table statistics
*&    Source code of Z programs
*&
*&
*& More Information:
*&
*&  Implementation guide: https://github.com/conradmauritz/ABAP_Projects/blob/main/ZCFPERFCHECK_V1/ZCFPERFCHECK%20Implementation%20Guide.docx
*&
*&
*&---------------------------------------------------------------------*
*& Change log:
*& Date       Author        Action
*& 2023-11-03 DEVELOPER     Created
*&
*&---------------------------------------------------------------------*

REPORT zcfperfcheck_v1.


*----------------------------------*
" DECLERATIONS

*-----------------*
" CONSTANTS

CONSTANTS:
  gc_kpi_ci_programs_to_analyze TYPE string  VALUE 'Z%',                      " Ensures that only Z programs get analyzed
  gc_kpi_bgd_job_runtime_in_sec TYPE i       VALUE 0,                         " Set to desired threshold in seconds
  gc_file_download_path         TYPE string  VALUE 'C:\zcfperfcheck_output\', " Specify download path
  gc_output_file_name           TYPE string  VALUE 'code_ci_bgd_st10_',       " File name format
  gc_output_file_extension      TYPE string  VALUE '.txt',                    " Output file extension
  gc_download_source_code       TYPE string  VALUE 'yes',                     " yes: download source code | no: do not download source code
  gc_field_separator            TYPE c       VALUE ';'.                       " Field separator to use when separating table field content


*-----------------*
" TYPES

TYPES:
  tt_output_format   TYPE STANDARD TABLE OF string,
  tt_st10_data       TYPE STANDARD TABLE OF abaplist,
  tt_char1024        TYPE STANDARD TABLE OF char1024,
  tt_error_messages  TYPE STANDARD TABLE OF string,
  tt_output_sections TYPE STANDARD TABLE OF string,
  tt_zprogram_tables TYPE STANDARD TABLE OF string.


*-----------------*
" DATA OBJECTS

DATA:
  gv_section_divider TYPE string,
  gv_error_message   TYPE string.

DATA:
  gt_ci_final_list        TYPE scit_alvlist.

DATA:
  gt_tbtco_output         TYPE tt_output_format.

DATA:
  gt_zprograms_statistics TYPE tt_char1024.

DATA:
  gt_error_messages       TYPE tt_error_messages.

DATA:
  gt_zprogram_tables      TYPE tt_zprogram_tables.


*----------------------------------*
" MAIN LOGIC

" Utilize code inspector functionality to analyze
" all Z programs and adjust content to be ready
" for output for further analysis
PERFORM kpi_code_inspector
  USING
    gc_kpi_ci_programs_to_analyze
    gc_file_download_path
    gc_download_source_code
    gc_output_file_extension
    gc_output_file_name
  CHANGING
    gv_section_divider
    gv_error_message
    gt_ci_final_list
    gt_error_messages
    gt_zprogram_tables.

" Extract long running job runtime information
" based on a pre-determined minimum runtime and
" retrieve the program names
PERFORM kpi_bgd_jobs
  USING
    gc_kpi_bgd_job_runtime_in_sec
    gc_kpi_ci_programs_to_analyze
    gc_field_separator
  CHANGING
    gv_error_message
    gt_tbtco_output
    gt_error_messages.

" Retrieve the ST10 table statistics which will be referenced
" when checking Z program table usage
PERFORM kpi_st10
  USING    gt_zprogram_tables
  CHANGING gv_error_message
           gt_error_messages
           gt_zprograms_statistics.

" Place all of the retrieved content into a downloadable file
" which will be used in further analysis

PERFORM output
  USING gc_file_download_path
        gc_output_file_extension
        gc_output_file_name
        gv_section_divider
        gv_error_message
        gt_ci_final_list
        gt_tbtco_output
        gt_zprograms_statistics
        gt_error_messages
        gt_zprogram_tables.


*----------------------------------*
" SUBROUTINES

FORM kpi_code_inspector
  USING
    iv_kpi_ci_programs_to_analyze TYPE string
    iv_file_download_path         TYPE string
    iv_download_source_code       TYPE string
    iv_output_file_extension      TYPE string
    iv_output_file_name           TYPE string
  CHANGING
    ev_section_divider            TYPE string
    ev_error_message              TYPE string
    et_ci_final_list              TYPE scit_alvlist
    et_error_messages             TYPE tt_error_messages
    et_zprogram_tables            TYPE tt_zprogram_tables.

  TYPES:
    BEGIN OF ts_z_programs,
      progname TYPE progname,
    END OF ts_z_programs.

  DATA:
    lv_z_program_name         TYPE progname,
    lv_z_program_heading_text TYPE progname.

  DATA:
    lt_list       TYPE scit_alvlist,
    lt_z_programs TYPE STANDARD TABLE OF ts_z_programs.

  DATA:
    lo_check_result           TYPE REF TO cl_ci_check_result.

  CLEAR: et_ci_final_list, ev_section_divider, ev_error_message, et_error_messages, et_zprogram_tables.

  " Find a list of all active (r3state = 'A') executable (subc = 1) Z programs in the system
  SELECT a~name
    FROM trdir AS a
    INNER JOIN reposrc AS b
      ON a~name = b~progname
    INTO TABLE @lt_z_programs
    WHERE a~name LIKE @iv_kpi_ci_programs_to_analyze
    AND a~name <> 'ZCFPERFCHECK_V1'
    AND a~subc = 1
    AND a~unam <> 'SAP'
    AND b~r3state = 'A'.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 1: No records selected from table trdir'
      CHANGING et_error_messages.
    EXIT. " FORM
  ENDIF. " SY-SUBRC <> 0

  " For each Z program, retrieve a list of tables used
  " so that the ST10 subroutine only retrieves the list
  " of tables used by the Z programs we are analyzing
  LOOP AT lt_z_programs INTO lv_z_program_name.
    " Append the name of the current being checked into the et_zprogram_tables table
    CONCATENATE 'Program Name: ' lv_z_program_name INTO lv_z_program_heading_text.
    APPEND lv_z_program_heading_text TO et_zprogram_tables.

    " Append the tables used by the program into the et_zprogram_tables_table
    CALL FUNCTION 'GET_TABLES'  "Supplies all tables used in program (TABLES, SEGMENTS, INCLUDE STRUCT
      EXPORTING
        progname   = lv_z_program_name
      TABLES
        tables_tab = et_zprogram_tables.
  ENDLOOP.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING ''
      CHANGING et_error_messages.
    EXIT.
  ENDIF. "SY-SUBRC <> 0

  " For each Z program, execute the Code Inspector check
  " and retrieve the results
  LOOP AT lt_z_programs INTO lv_z_program_name.
    TRY.
        CALL METHOD cl_ci_check=>single
          EXPORTING
            p_variant_user = space
            p_variant      = 'DEFAULT'
            p_obj_type     = 'PROG'
            p_obj_name     = lv_z_program_name
          IMPORTING
            p_result       = lo_check_result.
      CATCH cx_ci_invalid_variant.

        CONCATENATE 'Error 2: The SAP Code Inspector Check failed for program: ' lv_z_program_name 'Invalid Variant'
       INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.

      CATCH cx_ci_invalid_object.

        CONCATENATE 'Error 3: The SAP Code Inspector Check failed for program: ' lv_z_program_name 'Invalid Object'
           INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.

      CATCH cx_ci_check_error.

        CONCATENATE 'Error 4: The SAP Code Inspector Check failed for program: ' lv_z_program_name  'CI Check Error'
           INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.
    ENDTRY.

    lo_check_result->get_result( IMPORTING p_list = lt_list ).

    APPEND LINES OF lt_list TO et_ci_final_list.

    " Only download source code if it has been specified
    CASE iv_download_source_code.
      WHEN 'yes'.
        " Download source code for previously identified programs
        PERFORM z_program_source_code_download
          USING iv_file_download_path
                lv_z_program_name
                iv_output_file_extension
                iv_output_file_name
          CHANGING
            ev_error_message
            et_error_messages.
    ENDCASE. " IC_DOWNLOAD_SOURCE_CODE

  ENDLOOP. " LT_Z_PROGRAMS INTO LV_Z_PROGRAM_NAME

ENDFORM. " KPI_CODE_INSPECTOR

FORM kpi_bgd_jobs
  USING
    iv_kpi_bgd_job_runtime_in_sec TYPE i
    iv_kpi_ci_programs_to_analyze TYPE string
    iv_field_separator            TYPE c
  CHANGING
    ev_error_message              TYPE string
    et_tbtco_output               TYPE tt_output_format
    et_error_messages             TYPE tt_error_messages.

  TYPES:
    BEGIN OF lts_tbtco,
      jobname        TYPE btcjob,
      programname    TYPE btcprog,
      jobcount       TYPE btcjobcnt,
      btcsystem      TYPE btctgtsys,
      strtdate       TYPE btcxdate,
      strttime       TYPE btcxtime,
      enddate        TYPE btcxdate,
      endtime        TYPE btcxtime,
      status         TYPE btcstatus,
      runtimeseconds TYPE i,
    END OF lts_tbtco.

  TYPES:
    ltt_tbtco          TYPE STANDARD TABLE OF lts_tbtco.

  DATA:
    lv_output_format   TYPE string.

  DATA:
    lv_runtime_seconds TYPE i.

  DATA:
    lv_runtimeseconds  TYPE c LENGTH 10.

  DATA:
    lt_tbtco           TYPE ltt_tbtco.

  FIELD-SYMBOLS:
    <ls_tbtco>         TYPE lts_tbtco.

  CLEAR: ev_error_message, et_tbtco_output, et_error_messages.

  " Place records into table et_tbtco
  SELECT DISTINCT a~jobname, b~progname, a~jobcount, a~btcsystem, a~strtdate, a~strttime, a~enddate, a~endtime, a~status
    FROM tbtco AS a
    INNER JOIN tbtcp AS b
      ON a~jobname = b~jobname
    INTO TABLE @lt_tbtco
    WHERE b~progname LIKE @iv_kpi_ci_programs_to_analyze.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 5: No data selected from TBTCO'
      CHANGING et_error_messages.
    EXIT. " FORM
  ENDIF.

  " Prepare the output to the CSV file
  LOOP AT lt_tbtco ASSIGNING <ls_tbtco>.

    " Calculate the time difference betweent the start date/start time and
    " the end date/end time
    CALL FUNCTION 'SALP_SM_CALC_TIME_DIFFERENCE'
      EXPORTING
        date_1  = <ls_tbtco>-strtdate
        time_1  = <ls_tbtco>-strttime
        date_2  = <ls_tbtco>-enddate
        time_2  = <ls_tbtco>-endtime
      IMPORTING
        seconds = <ls_tbtco>-runtimeseconds.

  ENDLOOP. " LOOP AT LT_TBTCO ASSIGNING <LS_TBTCO>

  " Sort table et_tbtco based on runtime in seconds descending
  SORT lt_tbtco BY runtimeseconds DESCENDING.

  " Filter rows that do not fulfill the threshold
  DELETE lt_tbtco WHERE runtimeseconds <= iv_kpi_bgd_job_runtime_in_sec.

  LOOP AT lt_tbtco ASSIGNING <ls_tbtco>.

    lv_runtimeseconds = <ls_tbtco>-runtimeseconds.

    " Place the retrieved background job information into et_tbtco
    " in preparation for the content download
    CONCATENATE
      <ls_tbtco>-jobname
      <ls_tbtco>-programname
      <ls_tbtco>-jobcount
      <ls_tbtco>-btcsystem
      <ls_tbtco>-strtdate
      <ls_tbtco>-strttime
      <ls_tbtco>-enddate
      <ls_tbtco>-endtime
      <ls_tbtco>-status
      lv_runtimeseconds
      INTO lv_output_format
      SEPARATED BY iv_field_separator.

    APPEND lv_output_format TO et_tbtco_output.

  ENDLOOP. " LOOP AT LT_TBTCO ASSIGNING <LS_TBTCO>

ENDFORM. " KPI_BGD_JOBS

FORM kpi_st10
  USING
    it_zprogram_tables      TYPE tt_zprogram_tables
  CHANGING
    ev_error_message        TYPE string
    et_error_messages       TYPE tt_error_messages
    et_zprograms_statistics TYPE tt_char1024.

  DATA:
     lv_table_name  TYPE string.

  DATA:
    lt_st10_content TYPE STANDARD TABLE OF abaplist.

  CLEAR: et_zprograms_statistics, ev_error_message, et_error_messages.

  " Clear the ABAP list in memory
  CALL FUNCTION 'LIST_FREE_MEMORY'.

  " Call the ST10 functionality, retrieve the output and store the output in
  " the ABAP list in memory
  SUBMIT rstabl11 EXPORTING LIST TO MEMORY AND RETURN.

  CALL FUNCTION 'LIST_FROM_MEMORY'
    TABLES
      listobject = lt_st10_content
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 6: Nothing in the LIST content in memory'
      CHANGING et_error_messages.
    EXIT.
  ENDIF. "SY-SUBRC <> 0

  " Convert the Hexadecimal content in the ABAP list in memory
  " into ASCII
  CALL FUNCTION 'LIST_TO_ASCI'
    TABLES
      listobject = lt_st10_content
      listasci   = et_zprograms_statistics.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 7: Unable to convert the ST10 content from LIST to ASCII'
      CHANGING et_error_messages.
  ENDIF. "SY-SUBRC <> 0

  CALL FUNCTION 'LIST_FREE_MEMORY'.

ENDFORM. " KPI_ST10

FORM z_program_source_code_download
  USING
    iv_file_download_path    TYPE string
    iv_z_program_name        TYPE progname
    iv_output_file_extension TYPE string
    iv_output_file_name      TYPE string
  CHANGING
    ev_error_message         TYPE string
    et_error_messages        TYPE tt_error_messages.

  DATA:
    lt_z_programs_source TYPE TABLE OF string,
    lt_output_sections   TYPE STANDARD TABLE OF string.

  DATA:
    lv_kpi_code_inspector_file_nam TYPE string,
    lv_full_path                   TYPE string,
    lv_output_file_name            TYPE string.

  DATA:
    lv_z_program_name_char         TYPE c LENGTH 60.

  DATA:
    lv_date_stamp                  TYPE c LENGTH 10.

  CLEAR: ev_error_message, et_error_messages.

  " Prepare date and timestamp for file names
  WRITE: sy-datum TO lv_date_stamp.

  CLEAR lt_z_programs_source.

  lv_z_program_name_char = iv_z_program_name.

  " For each Z program identified, download the source code
  READ REPORT lv_z_program_name_char INTO lt_z_programs_source.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 8: lv_z_program_name_char is empty'
      CHANGING et_error_messages.
    EXIT. " FORM
  ENDIF. " SY-SUBRC <> 0

  " Prepare file name for z_program_source file download functionality
  REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
  CONCATENATE iv_file_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

  " Download Z programs source code
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = lt_z_programs_source.
  IF sy-subrc <> 0.
    CONCATENATE 'Error 9: Unable to download the collected Z program source code for:' iv_z_program_name INTO ev_error_message.
    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.
  ENDIF. "SY-SUBRC <> 0

ENDFORM. " Z_PROGRAM_SOURCE_CODE_DOWNLOAD

FORM output
  USING
    iv_file_download_path    TYPE string
    iv_output_file_extension TYPE string
    iv_output_file_name      TYPE string
    iv_section_divider       TYPE string
    iv_error_message         TYPE string
    it_ci_final_list         TYPE scit_alvlist
    it_tbtco_output          TYPE tt_output_format
    it_zprograms_statistics  TYPE tt_char1024
    it_error_messages        TYPE tt_error_messages
    it_zprogram_tables       TYPE tt_zprogram_tables.

  DATA:
     lv_date_stamp     TYPE c LENGTH 10.

  DATA:
    lv_full_path       TYPE string.

  DATA:
    lt_output_sections TYPE tt_output_sections.

  " Prepare date for file name
  WRITE:
    sy-datum TO lv_date_stamp.

  " Prepare filename and file path
  REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
  CONCATENATE iv_file_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

  " Add START_CI_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'START_CI_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  " Code Inspector content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_ci_final_list.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 10: Unable to download the Code Inspector content'
      CHANGING it_error_messages.
  ENDIF. "SY-SUBRC <> 0

  " Add END_CI_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'END_CI_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
      USING lv_full_path
            lt_output_sections
            iv_error_message
      CHANGING it_error_messages.

  " Add START_BGD_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'START_BGD_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  " BGD jobs download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_tbtco_output.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 11: Unable to download the background jobs content'
      CHANGING it_error_messages.
  ENDIF. "SY-SUBRC <> 0

  " Add END_BGD_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'END_BGD_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
   USING lv_full_path
         lt_output_sections
         iv_error_message
   CHANGING it_error_messages.

  " Add START_zprogram_tables_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'START_ZPROGRAM_TABLES_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_zprogram_tables.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 12: Unable to download the Z program table content'
      CHANGING it_error_messages.
  ENDIF. "SY-SUBRC <> 0

  " Add END_ERROR_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'END_zprogram_tables_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  " Add START_ST10_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'START_ST10_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  " ST10 content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_zprograms_statistics.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 13: Unable to download the ST10 content'
      CHANGING it_error_messages.
  ENDIF. "SY-SUBRC <> 0

  " Add END_ST10_SECTION section divider to output file
  PERFORM add_output_section_divider
   USING 'END_ST10_SECTION'
   CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
     USING lv_full_path
           lt_output_sections
           iv_error_message
     CHANGING it_error_messages.

  " Add START_ERROR_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'START_ERROR_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_error_messages.

  " Add END_ERROR_SECTION section divider to output file
  PERFORM add_output_section_divider
    USING 'END_ERROR_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_divider_write_to_file
    USING lv_full_path
          lt_output_sections
          iv_error_message
    CHANGING it_error_messages.

ENDFORM. " OUTPUT

FORM add_output_section_divider
  USING
    iv_section_text           TYPE string
  CHANGING
    et_output_section_divider TYPE tt_output_format.

  DATA:
    lv_section_divider_text TYPE string,
    lv_add_empty_line       TYPE string.

  " Adds the output section dividers to the output file to
  " make it easier to see when one section ends and another
  " section begins
  CLEAR et_output_section_divider.

  APPEND lv_add_empty_line TO et_output_section_divider.

  CONCATENATE '* ------ ' iv_section_text ' ------ *'
    INTO lv_section_divider_text.
  APPEND lv_section_divider_text TO et_output_section_divider.

  APPEND lv_add_empty_line TO et_output_section_divider.

ENDFORM.

FORM sections_divider_write_to_file
  USING
    iv_full_path       TYPE string
    it_output_sections TYPE tt_output_sections
    ev_error_message   TYPE string
    et_error_messages  TYPE tt_error_messages.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = iv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_output_sections.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 14: Unable to download the output section indicator content'
      CHANGING et_error_messages.
  ENDIF. "SY-SUBRC <> 0

ENDFORM.

FORM collect_error_messages
  USING
    ev_error_message  TYPE string
  CHANGING
    et_error_messages TYPE  tt_error_messages.

  " Append any generated error messages to et_error messages for
  " output into the output file
  APPEND ev_error_message TO et_error_messages.

ENDFORM.
