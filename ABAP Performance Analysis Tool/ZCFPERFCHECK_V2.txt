*&---------------------------------------------------------------------*
*& Report  ZCFPERFCHECK_V2
*&
*&---------------------------------------------------------------------*
*& Description:
*& 
*& The purpose of ZCFPERFCHECK_V2 is to extract data from an AS ABAP system that 
*& can be used for further analysis to determine:
*& 
*& 1.If there are Z programs running longer than the acceptable maximum runtime
*& 2.Based on the findings, what could be causing the Z programs to run for longer than necessary
*& 3.The most important adjustments to make to the Z programs identified, that would provide a 
*&   reduction in system resource utilization and the biggest improvement in runtime.
*&
*& Technical description:
*&
*& Get list of long running Z programs that exceed the
*&   specified minimum runtime threshold (FORM GET_LONG_RUNNING_BGD_JOB)
*& Perform code inspector analysis for Z programs identified in
*&   FORM GET_LONG_RUNNING_BGD_JOBS
*& Get list of tables used by Z programs retrieved in
*&   FORM GET_LONG_RUNNING_BGD_JOBS
*& Get a list of indexes for the tables retrieved
*& Get a list of fields for each index retrieved
*& Get table statistics for tables retrieved in FORM GET_TABLES_INDEXES_USED
*& Get the number of records contained in each table retrieved
*& Get source code of Z programs retrieved in FORM get_long_running_bgd_jobs
*& Download extracted content for further analysis (FORM DOWNLOAD_EXTRACED_CONTENT)
*&
*&
*& More Information:
*&
*& Implementation guide URL - 
*&  https://github.com/conradmauritz/ABAP_Projects/blob/main/ZCFPERFCHECK_V2/ZCFPERFCHECK_V2%20Implementation%20Guide.docx
*&
*&---------------------------------------------------------------------*
*& Change log:
*& Date       Author        Action
*& 2023-11-03 DEVELOPER     Created
*&
*&---------------------------------------------------------------------*

REPORT zcfperfcheck_v2.


*----------------------------------*
" DECLERATIONS

*-----------------*
" CONSTANTS

CONSTANTS:
  gc_min_bgd_job_runtime_in_sec TYPE i      VALUE 100,                        " Set to desired threshold in seconds
  gc_program_name_prefix        TYPE string VALUE 'Z%',                       " Ensures that only Z programs get analyzed
  gc_field_separator            TYPE c      VALUE ';',                        " Field separator to use when separating table field content
  gc_allow_source_code_download TYPE string VALUE 'yes',                      " yes: download source code | no: do not download source code
  gc_file_download_path         TYPE string VALUE 'C:\zcfperfcheck_output\', " Specify download path
  gc_output_file_name           TYPE string VALUE 'code_ci_bgd_st10_',       " File name format
  gc_output_file_extension      TYPE string VALUE '.txt'.                    " Output file extension

*-----------------*
" TYPES

TYPES:
  tt_output_format      TYPE STANDARD TABLE OF string.

TYPES:
  BEGIN OF lts_tbtco_program_names,
    programname TYPE btcprog,
  END OF lts_tbtco_program_names,

  tt_tbtco_program_names TYPE STANDARD TABLE OF lts_tbtco_program_names,
  tt_char2048            TYPE STANDARD TABLE OF char2048,
  tt_zprogram_tables     TYPE STANDARD TABLE OF string,
  tt_table_indexes       TYPE STANDARD TABLE OF string,
  tt_error_messages      TYPE STANDARD TABLE OF string,
  tt_output_sections     TYPE STANDARD TABLE OF string,
  tt_index_fields        TYPE STANDARD TABLE OF string,
  tt_record_count        TYPE STANDARD TABLE OF string.

*-----------------*
" DATA OBJECTS

DATA:
  gt_tbtco_output           TYPE tt_output_format.

DATA:
  gt_tbtco_program_names    TYPE tt_tbtco_program_names.

DATA:
  gt_zprogram_tables        TYPE tt_zprogram_tables.

DATA:
  gt_table_indexes          TYPE tt_table_indexes.

DATA:
  gt_index_fields           TYPE tt_index_fields.

DATA:
  gt_record_count           TYPE tt_record_count.

DATA:
  gt_code_inspector_results TYPE scit_alvlist.

DATA:
  gt_zprograms_statistics   TYPE tt_char2048.

DATA:
  gv_section_divider TYPE string,
  gv_error_message   TYPE string.

DATA:
  gt_error_messages         TYPE tt_error_messages.

*----------------------------------*
" MAIN LOGIC

PERFORM get_long_running_bgd_jobs
  USING
    gc_min_bgd_job_runtime_in_sec
    gc_program_name_prefix
    gc_field_separator
  CHANGING
    gt_tbtco_output
    gt_tbtco_program_names
    gt_error_messages
    gv_error_message.

PERFORM code_inspector_analysis
  USING
    gc_field_separator
    gt_tbtco_output
    gt_tbtco_program_names
  CHANGING
    gt_code_inspector_results
    gt_error_messages
    gv_error_message.

PERFORM get_tables_indexes_used
  USING
    gt_tbtco_program_names
  CHANGING
    gt_zprogram_tables
    gt_table_indexes
    gt_error_messages
    gt_index_fields
    gv_error_message.

PERFORM get_table_statistics
  USING
    gt_zprogram_tables
  CHANGING
    gt_zprograms_statistics
    gt_record_count
    gt_error_messages.

PERFORM get_z_program_source_code
  USING
    gc_allow_source_code_download
    gc_file_download_path
    gc_output_file_extension
    gc_output_file_name
    gt_tbtco_program_names
  CHANGING
    gt_error_messages.

PERFORM download_extracted_content
  USING
    gc_file_download_path
    gc_output_file_extension
    gc_output_file_name
    gc_min_bgd_job_runtime_in_sec
    gc_program_name_prefix
    gc_field_separator
    gt_code_inspector_results
    gt_tbtco_output
    gt_zprograms_statistics
    gt_error_messages
    gt_zprogram_tables
    gt_table_indexes
    gt_index_fields
    gt_record_count
    gv_section_divider
    gv_error_message.


*----------------------------------*
" SUBROUTINES

" Get list of long running Z programs that exceed the specified minimum runtime threshold
FORM get_long_running_bgd_jobs
  USING
    iv_min_bgd_job_runtime_in_sec TYPE i
    iv_program_name_prefix        TYPE string
    iv_field_separator            TYPE c
  CHANGING
    et_tbtco_output               TYPE tt_output_format
    et_tbtco_program_names        TYPE tt_tbtco_program_names
    et_error_messages             TYPE tt_error_messages
    ev_error_message              TYPE string.

  TYPES:
    BEGIN OF lts_tbtco,
      jobname        TYPE btcjob,
      programname    TYPE btcprog,
      jobcount       TYPE btcjobcnt,
      strtdate       TYPE btcxdate,
      strttime       TYPE btcxtime,
      enddate        TYPE btcxdate,
      endtime        TYPE btcxtime,
      status         TYPE btcstatus,
      runtimeseconds TYPE i,
    END OF lts_tbtco.

  TYPES:
    ltt_tbtco          TYPE STANDARD TABLE OF lts_tbtco.

  DATA:
    lt_tbtco           TYPE ltt_tbtco.

  DATA:
    lv_output_format   TYPE string.

  DATA:
    lv_runtimeseconds  TYPE c LENGTH 10.

  FIELD-SYMBOLS:
    <ls_tbtco>         TYPE lts_tbtco.

  CLEAR: et_tbtco_output.

  " Place bgd runtime information into lt_tbtco
  SELECT DISTINCT a~jobname, b~progname, a~jobcount, a~strtdate, a~strttime, a~enddate, a~endtime, a~status
    FROM tbtco AS a
    INNER JOIN tbtcp AS b
      ON a~jobname = b~jobname
    INTO TABLE @lt_tbtco
    WHERE b~progname LIKE @iv_program_name_prefix.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 1: No data selected from tbtco'
      CHANGING et_error_messages.
    EXIT. " FORM
  ENDIF.

  " Calculate the time difference betweent the start date/start time and
  " the end date/end time
  LOOP AT lt_tbtco ASSIGNING <ls_tbtco>.

    CALL FUNCTION 'SALP_SM_CALC_TIME_DIFFERENCE'
      EXPORTING
        date_1  = <ls_tbtco>-strtdate
        time_1  = <ls_tbtco>-strttime
        date_2  = <ls_tbtco>-enddate
        time_2  = <ls_tbtco>-endtime
      IMPORTING
        seconds = <ls_tbtco>-runtimeseconds.

  ENDLOOP. " LOOP AT LT_TBTCO ASSIGNING <LS_TBTCO>

  "Sort table lt_tbtco based on runtime in seconds descending
  SORT lt_tbtco BY runtimeseconds DESCENDING.

  "Remove rows that have a runtime that is <= to
  "the value specified in iv_min_bgd_job_runtime_in_sec
  DELETE lt_tbtco WHERE runtimeseconds <= iv_min_bgd_job_runtime_in_sec.

  " Retrieve the program names in lt_tbtco and store in et_tbtcp_program_names
  " for use in FORM code_inspector_analysis
  SELECT programname
    FROM @lt_tbtco AS programname
    INTO TABLE @et_tbtco_program_names.
  IF sy-subrc <> 0.
    ev_error_message = 'Error 2: No data selected from lt_tbtco'.
    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.
  ENDIF. " SY-SUBRC <> 0

  " Place the retrieved bgd runtime information into et_tbtco
  " for later download
  LOOP AT lt_tbtco ASSIGNING <ls_tbtco>.

    lv_runtimeseconds = <ls_tbtco>-runtimeseconds.

    CONCATENATE
      <ls_tbtco>-jobname
      <ls_tbtco>-programname
      <ls_tbtco>-jobcount
      <ls_tbtco>-strtdate
      <ls_tbtco>-strttime
      <ls_tbtco>-enddate
      <ls_tbtco>-endtime
      <ls_tbtco>-status
      lv_runtimeseconds
      INTO lv_output_format
      SEPARATED BY iv_field_separator.

    APPEND lv_output_format TO et_tbtco_output.

  ENDLOOP. " LOOP AT LT_TBTCO ASSIGNING <LS_TBTCO>

ENDFORM. " GET_LONG_RUNNING_BGD_JOBS

" Perform code inspector analysis for Z programs identified in FORM get_long_running_bgd_jobs
FORM code_inspector_analysis
  USING
    iv_field_separator        TYPE c
    et_tbtco_output           TYPE tt_output_format
    et_tbtco_program_names    TYPE tt_tbtco_program_names
  CHANGING
    et_code_inspector_results TYPE scit_alvlist
    et_error_messages         TYPE tt_error_messages
    ev_error_message          TYPE string.

  TYPES:
    BEGIN OF lts_z_programs,
      progname TYPE progname,
    END OF lts_z_programs.

  DATA:
    lv_z_program_name TYPE progname.

  DATA:
    lt_list       TYPE scit_alvlist.

  DATA:
    lt_z_programs TYPE STANDARD TABLE OF lts_z_programs.

  DATA:
   lo_check_result TYPE REF TO cl_ci_check_result.

  FIELD-SYMBOLS:
   <ls_tbtco_program_name> TYPE lts_z_programs.

  CLEAR et_code_inspector_results.

  " For each Z program, execute the Code Inspector check
  " and retrieve the results
  LOOP AT et_tbtco_program_names ASSIGNING <ls_tbtco_program_name>.

    lv_z_program_name = <ls_tbtco_program_name>.

    TRY.
        CALL METHOD cl_ci_check=>single
          EXPORTING
            p_variant_user = space
            p_variant      = 'DEFAULT'
            p_obj_type     = 'PROG'
            p_obj_name     = lv_z_program_name
          IMPORTING
            p_result       = lo_check_result.
      CATCH cx_ci_invalid_variant.

        CONCATENATE 'Error 3: The SAP Code Inspector Check failed for program: ' lv_z_program_name 'Invalid Variant'
       INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.

      CATCH cx_ci_invalid_object.

        CONCATENATE 'Error 4: The SAP Code Inspector Check failed for program: ' lv_z_program_name 'Invalid Object'
           INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.

      CATCH cx_ci_check_error.

        CONCATENATE 'Error 5: The SAP Code Inspector Check failed for program: ' lv_z_program_name  'CI Check Error'
           INTO ev_error_message.

        PERFORM collect_error_messages
          USING ev_error_message
          CHANGING et_error_messages.
    ENDTRY.

    lo_check_result->get_result( IMPORTING p_list = lt_list ).

    APPEND LINES OF lt_list TO et_code_inspector_results.

  ENDLOOP. " LT_Z_PROGRAMS INTO LV_Z_PROGRAM_NAME

ENDFORM. " CODE_INSPECTOR_ANALYSIS

" Get list of tables and indexes used by Z programs retrieved in FORM get_long_running_bgd_jobs
FORM get_tables_indexes_used
  USING
    it_tbtco_program_names TYPE tt_tbtco_program_names
  CHANGING
    et_zprogram_tables     TYPE tt_zprogram_tables
    et_table_indexes       TYPE tt_table_indexes
    et_error_messages      TYPE tt_error_messages
    et_index_fields        TYPE tt_index_fields
    ev_error_message       TYPE string.

  DATA:
    lv_zprogram_name         TYPE progname,
    lv_zprogram_heading_text TYPE progname.

  DATA:
    lv_ztable_name        TYPE string,
    lv_ztabname           TYPE string,
    lv_zheader            TYPE string,
    lv_index_table_header TYPE string,
    lv_table_select_error TYPE string,
    lv_index_name         TYPE string,
    lv_index_field_header TYPE string.

  " For each Z program, retrieve a list of tables used
  LOOP AT it_tbtco_program_names INTO lv_zprogram_name.

    " Append the name of the current being checked into the et_zprogram_tables table
    CONCATENATE 'Program Name: ' lv_zprogram_name INTO lv_zprogram_heading_text.
    APPEND lv_zprogram_heading_text TO et_zprogram_tables.

    " Append the tables used by the program into the et_zprogram_tables_table
    CALL FUNCTION 'GET_TABLES'  "Supplies all tables used in program (TABLES, SEGMENTS, INCLUDE STRUCT
      EXPORTING
        progname   = lv_zprogram_name
      TABLES
        tables_tab = et_zprogram_tables.

  ENDLOOP. " IT_TBTCO_PROGRAM_NAMES INTO LV_ZPROGRAM_NAME
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 6: No tables in it_tbtco_program_names'
      CHANGING et_error_messages.
    EXIT.
  ENDIF. "SY-SUBRC <> 0

  " Reference DD02L to determine if  the value in lv_z_table_name is a valid table
  " If the return code is <> 0 then it is not a valid table and is deleted from et_z_program_tables
  LOOP AT et_zprogram_tables INTO lv_ztable_name.

    IF lv_ztable_name CS 'Program Name:'.
      CONTINUE.
    ENDIF. " LV_Z_TABLE_NAME CS 'PROGRAM NAME:'

    SELECT SINGLE tabname
      FROM dd02l
      INTO @lv_ztabname
      WHERE tabname = @lv_ztable_name AND tabclass = 'TRANSP' AND as4local = 'A'.
    IF sy-subrc <> 0.
      DELETE et_zprogram_tables INDEX sy-tabix.
    ENDIF." SY-SUBRC <> 0
  ENDLOOP. " ET_ZPROGRAM_TABLES INTO LV_ZTABLE_NAME

  CLEAR lv_ztable_name.

  " Get a list of the indexes for each table in et_zprogram_tables
  LOOP AT et_zprogram_tables INTO lv_ztable_name.

    IF lv_ztable_name CS 'Program Name:'.
      CONTINUE.
    ENDIF. " LV_Z_TABLE_NAME CS 'PROGRAM NAME:'

    CONCATENATE 'Indexes for table:' lv_ztable_name INTO lv_index_table_header.
    APPEND lv_index_table_header TO et_table_indexes.

    SELECT indexname
      FROM dd12l
      APPENDING TABLE @et_table_indexes
      WHERE sqltab = @lv_ztable_name.
    IF sy-subrc <> 0.

      " If sy-subrc <> 0 there are no indexes for the table
      " Remove the index table header from et_table_indexes
      DELETE et_table_indexes INDEX lv_index_table_header.

    ENDIF." SY-SUBRC <> 0

  ENDLOOP. " ET_ZPROGRAM_TABLES INTO LV_ZTABNAME

  " Get the index fields for each index in et_table_indexes
  LOOP AT et_table_indexes INTO lv_index_name.

    IF lv_index_name CS 'Indexes for table'.
      CONTINUE.
    ENDIF. " LV_INDEX_NAME CS 'INDEXES FOR TABLE'

    CONCATENATE 'Fields for Index:' lv_index_name INTO lv_index_field_header.
    APPEND lv_index_field_header TO et_index_fields.

    SELECT fieldname
      FROM dd17s
      APPENDING TABLE @et_index_fields
      WHERE indexname = @lv_index_name.
    IF lv_index_name IS INITIAL.

      PERFORM collect_error_messages
        USING 'Error 7: lv_index_name is empty'
        CHANGING et_error_messages.

    ENDIF." SY-SUBRC <> 0

  ENDLOOP.

ENDFORM. " get_tables_indexes_used

" Get table statistics for tables retrieved in FORM get_tables_indexes_used
FORM get_table_statistics
  USING
    et_zprogram_tables      TYPE tt_zprogram_tables
  CHANGING
    et_zprograms_statistics TYPE tt_char2048
    et_record_count         TYPE tt_record_count
    et_error_messages       TYPE tt_error_messages.

  DATA:
    lt_st10_content TYPE STANDARD TABLE OF abaplist.

  DATA:
    lv_table_records_header TYPE string,
    lv_table_name           TYPE string,
    lv_error                TYPE string.

  DATA:
    lv_record_counter       TYPE int8.

  CLEAR: et_zprograms_statistics, et_record_count.

  " Clear the ABAP list in memory
  CALL FUNCTION 'LIST_FREE_MEMORY'.

  " Call the ST10 functionality, retrieve the output and store the output in
  " the ABAP list in memory
  SUBMIT rstabl11 EXPORTING LIST TO MEMORY AND RETURN.

  CALL FUNCTION 'LIST_FROM_MEMORY'
    TABLES
      listobject = lt_st10_content
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 8: Nothing in the LIST content in memory'
      CHANGING et_error_messages.
  ENDIF. " SY-SUBRC <> 0

  " Convert the Hexadecimal content in the ABAP list in memory
  " into ASCII
  CALL FUNCTION 'LIST_TO_ASCI'
    TABLES
      listobject = lt_st10_content
      listasci   = et_zprograms_statistics.
  IF sy-subrc <> 0.
    PERFORM collect_error_messages
      USING 'Error 9: LIST_TO_ASCI conversion failed'
      CHANGING et_error_messages.
    CALL FUNCTION 'LIST_FREE_MEMORY'.
  ENDIF. " SY-SUBRC <> 0

  " Get the record counts for each table in et_zprogram_tables
  LOOP AT et_zprogram_tables INTO lv_table_name.

    IF lv_table_name CS 'Program Name'.
      CONTINUE.
    ENDIF. " LV_TABLE_RECORDS CS 'PROGRAM NAME'

    CONCATENATE 'Record count for table:' lv_table_name INTO lv_table_records_header.
    APPEND lv_table_records_header TO et_record_count.

    SELECT COUNT(*)
      FROM (lv_table_name)
      INTO lv_record_counter
      BYPASSING BUFFER.
    IF lv_record_counter IS INITIAL.

      CONCATENATE 'Error 10: No record count retrieved for: ' lv_table_name INTO lv_error.

      PERFORM collect_error_messages
        USING lv_error
        CHANGING et_error_messages.

      CONTINUE.

    ENDIF." LV_RECORD_COUNTER IS INITIAL

    APPEND lv_record_counter TO et_record_count.

  ENDLOOP.

ENDFORM. " GET_TABLE_STATISTICS

" Get source code of Z programs retrieved in FORM get_long_running_bgd_jobs
FORM get_z_program_source_code
  USING
    iv_allow_source_code_download TYPE string
    iv_file_download_path         TYPE string
    iv_output_file_extension      TYPE string
    iv_output_file_name           TYPE string
    it_tbtco_program_names        TYPE tt_tbtco_program_names
  CHANGING
    et_error_messages             TYPE tt_error_messages.

  DATA:
    iv_z_program_name      TYPE progname.

  DATA:
    lt_z_programs_source TYPE TABLE OF string,
    lt_output_sections   TYPE STANDARD TABLE OF string.

  DATA:
    lv_z_program_name_char TYPE c LENGTH 60,
    lv_date_stamp          TYPE c LENGTH 10.

  DATA:
    lv_full_path     TYPE string,
    lv_error_message TYPE string.

  DATA:
    rc                     TYPE i.

  DATA:
    file_status TYPE abap_bool.

  CASE iv_allow_source_code_download.
    WHEN 'yes'.
      " Prepare date and timestamp for file names
      WRITE: sy-datum TO lv_date_stamp.

      CLEAR lt_z_programs_source.

      " Prepare file name for z_program_source file download functionality
      REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
      CONCATENATE iv_file_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

      CALL METHOD cl_gui_frontend_services=>file_exist
        EXPORTING
          file   = lv_full_path
        RECEIVING
          result = file_status.

      IF file_status = abap_true.
        CALL METHOD cl_gui_frontend_services=>file_delete
          EXPORTING
            filename = lv_full_path
          CHANGING
            rc       = rc.
        IF sy-subrc <> 0.
          CONCATENATE 'Error 11: Unable to delete file' lv_full_path INTO lv_error_message.
          PERFORM    collect_error_messages
            USING    lv_error_message
            CHANGING et_error_messages.
        ENDIF. "SY-SUBRC <> 0
      ENDIF. " FILE_STATUS = ABAP_TRUE

      " Add START_SOURCE_CODE_SECTION section divider to output file
      PERFORM add_output_section_divider
      USING 'START_SOURCE_CODE_SECTION'
      CHANGING lt_output_sections.

      PERFORM sections_divider_write_to_file
        USING    lv_full_path
                 lt_output_sections
        CHANGING gt_error_messages.

      LOOP AT it_tbtco_program_names INTO lv_z_program_name_char.

        " For each Z program identified, download the source code
        READ REPORT lv_z_program_name_char INTO lt_z_programs_source.
        IF sy-subrc <> 0.
          PERFORM collect_error_messages
            USING    'Error 12: Downloading Z programs source code failed'
            CHANGING et_error_messages.
          EXIT. " FORM
        ENDIF. " SY-SUBRC <> 0

        " Download Z programs source code
        CALL FUNCTION 'GUI_DOWNLOAD'
          EXPORTING
            filename      = lv_full_path
            no_auth_check = 'X'
            append        = 'X'
          TABLES
            data_tab      = lt_z_programs_source.
        IF lt_z_programs_source IS INITIAL.
          PERFORM collect_error_messages
            USING 'Error 13: lt_z_programs_source is empty'
            CHANGING et_error_messages.
        ENDIF. " LT_Z_PROGRAMS_SOURCE IS INITIAL

      ENDLOOP.

      " Add END_SOURCE_CODE_SECTION section divider to output file
      PERFORM add_output_section_divider
        USING 'END_SOURCE_CODE_SECTION'
        CHANGING lt_output_sections.

      PERFORM sections_divider_write_to_file
        USING
          lv_full_path
          lt_output_sections
        CHANGING
          gt_error_messages.

  ENDCASE.

ENDFORM. " GET_Z_PROGRAM_SOURCE_CODE

" Download extracted content for further analysis
FORM download_extracted_content
  USING
    iv_file_download_path         TYPE string
    iv_output_file_extension      TYPE string
    iv_output_file_name           TYPE string
    iv_min_bgd_job_runtime_in_sec TYPE i
    iv_program_name_prefix        TYPE string
    iv_field_separator            TYPE c
    it_ci_final_list              TYPE scit_alvlist
    it_tbtco_output               TYPE tt_output_format
    it_zprograms_statistics       TYPE tt_char2048
    it_error_messages             TYPE tt_error_messages
    it_zprogram_tables            TYPE tt_zprogram_tables
    it_table_indexes              TYPE tt_table_indexes
    it_index_fields               TYPE tt_index_fields
    it_record_count               TYPE tt_record_count
    iv_section_divider            TYPE string
    iv_error_message              TYPE string.

  TYPES:
    BEGIN OF lts_constants,
      min_bgd_job_runtime_in_sec TYPE i,
      record_separator_a         TYPE c,
      program_name_prefix        TYPE string,
      record_separator_b         TYPE c,
      field_separator            TYPE c,
    END OF lts_constants.

  DATA:
    lv_date_stamp      TYPE c LENGTH 10.

  DATA:
    lv_full_path    TYPE string,
    lv_section_name TYPE string.

  DATA:
    lt_output_sections TYPE tt_output_sections.

  DATA:
    lt_constants    TYPE STANDARD TABLE OF lts_constants,
    wa_lt_constants LIKE LINE OF lt_constants.

  " Prepare date for file name
  WRITE:
    sy-datum TO lv_date_stamp.

  " Retrieve the values defined by the user in the constants at the start of the program
  " so that we are aware of what values they used
  wa_lt_constants-min_bgd_job_runtime_in_sec = iv_min_bgd_job_runtime_in_sec.
  wa_lt_constants-program_name_prefix = iv_program_name_prefix.
  wa_lt_constants-field_separator = iv_field_separator.
  wa_lt_constants-record_separator_a = '|'.
  wa_lt_constants-record_separator_b = '|'.

  APPEND wa_lt_constants TO lt_constants.

  " Prepare filename and file path
  REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
  CONCATENATE iv_file_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

  " Add START_BGD_SECTION section divider to output file
  lv_section_name = 'START_BGD_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " BGD jobs download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_tbtco_output.
  IF it_tbtco_output IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 14: it_tbtco_output is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_TBTCO_OUTPUT IS INITIAL

  " Add END_BGD_SECTION section divider to output file
  lv_section_name = 'END_BGD_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_CI_SECTION section divider to output file
  lv_section_name = 'START_CI_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Code Inspector content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_ci_final_list.
  IF it_ci_final_list IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 15: it_ci_final_list is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_CI_FINAL_LIST IS INITIAL

  " Add END_CI_SECTION section divider to output file
  lv_section_name = 'END_CI_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_ZPROGRAM_TABLES_SECTION section divider to output file
  lv_section_name = 'START_TABLES_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_zprogram_tables.
  IF it_zprogram_tables IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 16: it_z_program_tables is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_ZPROGRAM_TABLES IS INITIAL

  " Add END_TBALES_TABLES_SECTION section divider to output file
  lv_section_name = 'END_TABLES_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_TABLE_RECORDS_SECTION section divider to output file
  lv_section_name = 'START_TABLE_RECORDS_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_record_count.
  IF it_zprogram_tables IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 17: it_record_count is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_ZPROGRAM_TABLES IS INITIAL

  " Add END_TABLE_RECORDS_SECTION section divider to output file
  lv_section_name = 'END_TABLE_RECORDS_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_INDEXES_SECTION section divider to output file
  lv_section_name = 'START_INDEXES_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_table_indexes.
  IF it_zprogram_tables IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 18: it_table_indexes is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_ZPROGRAM_TABLES IS INITIAL

  " Add END_INDEXES_SECTION section divider to output file
  lv_section_name = 'END_INDEXES_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_INDEX_FIELDS_SECTION section divider to output file
  lv_section_name = 'START_INDEX_FIELDS_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_index_fields.
  IF it_zprogram_tables IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 19: it_index_fields is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_ZPROGRAM_TABLES IS INITIAL

  " Add END_INDEX_FIELDS_SECTION section divider to output file
  lv_section_name = 'END_INDEX_FIELDS_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_ST10_SECTION section divider to output file
  lv_section_name = 'START_ST10_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " ST10 content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_zprograms_statistics.
  IF it_zprograms_statistics IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 20: it_zprograms_statistics is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_ZPROGRAMS_STATISTICS IS INITIAL

  " Add END_ST10_SECTION section divider to output file
  lv_section_name = 'END_ST10_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Add START_ERROR_SECTION section divider to output file
  lv_section_name = 'START_ERROR_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

  " Download error message content
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_error_messages.

  " Add END_ERROR_SECTION section divider to output file
  lv_section_name = 'END_ERROR_SECTION'.

  PERFORM add_section_divider
   USING
     lv_full_path
     lv_section_name
   CHANGING
     it_error_messages
     lt_output_sections.

  " Add START_CONSTANTS_SECTION section divider to output file
  lv_section_name = 'START_CONSTANTS_SECTION'.

  PERFORM add_section_divider
    USING
      lv_full_path
      lv_section_name
    CHANGING
      it_error_messages
      lt_output_sections.

" Download the data stored in lt_constants
CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = lt_constants.

  " Add END_CONSTANTS_SECTION section divider to output file
  lv_section_name = 'END_CONSTANTS_SECTION'.

  PERFORM add_section_divider
   USING
     lv_full_path
     lv_section_name
   CHANGING
     it_error_messages
     lt_output_sections.

ENDFORM. " DOWNLOAD_EXTRACTED_CONTENT

FORM collect_error_messages
  USING
    ev_error_message  TYPE string
  CHANGING
    et_error_messages TYPE  tt_error_messages.

  " Append any generated error messages to et_error messages for
  " output into the output file
  APPEND ev_error_message TO et_error_messages.

ENDFORM.

FORM add_section_divider
  USING
    iv_full_path       TYPE string
    iv_section_name    TYPE string
  CHANGING
    it_error_messages  TYPE tt_error_messages
    lt_output_sections TYPE tt_output_sections.

  " Add section divider to output file
  PERFORM add_output_section_divider
    USING
      iv_section_name
    CHANGING
      lt_output_sections.

  PERFORM sections_divider_write_to_file
   USING
     iv_full_path
     lt_output_sections
   CHANGING
     it_error_messages.

ENDFORM. " ADD_SECTION_DIVIDER

FORM add_output_section_divider
  USING
    iv_section_text           TYPE string
  CHANGING
    et_output_section_divider TYPE tt_output_format.

  DATA:
    lv_section_divider_text TYPE string,
    lv_add_empty_line       TYPE string.

  " Adds the output section dividers to the output file to
  " make it easier to see when one section ends and another
  " section begins
  CLEAR et_output_section_divider.

  APPEND lv_add_empty_line TO et_output_section_divider.

  CONCATENATE '* ------ ' iv_section_text ' ------ *'
    INTO lv_section_divider_text.
  APPEND lv_section_divider_text TO et_output_section_divider.

  APPEND lv_add_empty_line TO et_output_section_divider.

ENDFORM.

FORM sections_divider_write_to_file
  USING
    iv_full_path       TYPE string
    it_output_sections TYPE tt_output_sections
  CHANGING
    it_error_messages  TYPE tt_error_messages.

  " Adds section divider to output file
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = iv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_output_sections.
  IF it_output_sections IS INITIAL.
    PERFORM collect_error_messages
      USING 'Error 21: it_output_sections is empty'
      CHANGING it_error_messages.
  ENDIF. " IT_OUTPUT_SECTIONS IS INITIAL

ENDFORM.
