*&---------------------------------------------------------------------*
*& Report ZHLTHCHCK
*&---------------------------------------------------------------------*
*& Author: Conrad Fourie
*& Program Summary: Enables Basis Administrators to generate consistent
*&                  health check reports.
*&---------------------------------------------------------------------*
REPORT zhlthchck.

*TODO: Implement error handling
*TODO: For Generated by, change it to show username and full name

*-----------------------------------------------------------------------

* Global data objects decleration area

DATA: gt_list_tab     TYPE TABLE OF abaplist,
      gv_startup_time TYPE t,
      gv_startup_date TYPE d.

*-----------------------------------------------------------------------

* Use FM SAPTUNE_GET_SUMMARY_STATISTIC to get the startup date and time

CALL FUNCTION 'SAPTUNE_GET_SUMMARY_STATISTIC'
  EXPORTING
    destination      = 'NONE'
  IMPORTING
    startup_time     = gv_startup_time
    startup_date     = gv_startup_date
  EXCEPTIONS
    no_authorization = 1
    OTHERS           = 2.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

* Generate a report header of sorts to indicate
* SID, Date, Time, and Username, startup date
* and startup time

**TODO: Display date and time in user specific format**

WRITE: 'Generated for       : ', sy-sysid,
     / 'Generated on        : ', sy-datum,
     / 'Generated at        : ', sy-uzeit,
     / 'Generated by        : ', sy-uname,
     / 'System startup date : ', gv_startup_date,
     / 'System startup time : ', gv_startup_time.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction SICK

FORMAT COLOR = col_heading.
WRITE: 'SAP Initial Consistency Check'.
FORMAT COLOR = col_background.

* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rsicc000 EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction SM51

FORMAT COLOR = col_heading.
WRITE: 'SM51 Overview'.
FORMAT COLOR = col_background.

* Clear the content of the %_LIST memory id
* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rsm51000_alv_new EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction SM66

FORMAT COLOR = col_heading.
WRITE: 'SM66 Overview'.
FORMAT COLOR = col_background.

* Clear the content of the %_LIST memory id
* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rsmon000_alv_new EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction AL08

FORMAT COLOR = col_heading.
WRITE: 'AL08 Overview'.
FORMAT COLOR = col_background.

* Clear the content of the %_LIST memory id
* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rsm04000_alv_new EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction ST02

FORMAT COLOR = col_heading.
WRITE: 'ST02 Overview'.
FORMAT COLOR = col_background.

* Clear the content of the %_LIST memory id
* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rstune50 EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* This section shows the output of transaction AL12

FORMAT COLOR = col_heading.
WRITE: 'AL12 Overview'.
FORMAT COLOR = col_background.

* Clear the content of the %_LIST memory id
* Submit the program and export the list content to memory
* Retrieve the list content from memory
* Write the list content in the report output

CALL FUNCTION 'LIST_FREE_MEMORY'.

SUBMIT rsdbbuff EXPORTING LIST TO MEMORY AND RETURN.

CALL FUNCTION 'LIST_FROM_MEMORY'
  TABLES
    listobject = gt_list_tab
  EXCEPTIONS
    not_found  = 1
    OTHERS     = 2.

IF sy-subrc = 0.
  CALL FUNCTION 'WRITE_LIST'
    TABLES
      listobject = gt_list_tab.
ENDIF.

ULINE.

*-----------------------------------------------------------------------

* Display the installed components and release information

FORMAT COLOR = col_heading.
WRITE: 'Installed Software Components', /.
FORMAT COLOR = col_background.

DATA: it_cvers TYPE TABLE OF cvers,
      wa_cvers LIKE LINE OF it_cvers.

SELECT * FROM cvers INTO TABLE it_cvers.

LOOP AT it_cvers INTO wa_cvers.
  SHIFT wa_cvers-extrelease LEFT DELETING LEADING '0'.
  WRITE: / 'Software Component: ', wa_cvers-component,
         / 'SAP Release:        ', wa_cvers-release,
         / 'SP Level:           ', wa_cvers-extrelease, /.
ENDLOOP.

ULINE.

*-----------------------------------------------------------------------

* Display the installed product version

FORMAT COLOR = col_heading.
WRITE: 'Installed Products', /.
FORMAT COLOR = col_background.

DATA: it_prdvers TYPE TABLE OF prdvers,
      wa_prdvers LIKE LINE OF it_prdvers.

SELECT * FROM prdvers INTO TABLE it_prdvers.

LOOP AT it_prdvers INTO wa_prdvers.
  WRITE: / 'Product Name:       ', wa_prdvers-name,
         / 'Vendor Name:        ', wa_prdvers-vendor,
         / 'Product Version:    ', wa_prdvers-version, /.
ENDLOOP.

ULINE.

*-----------------------------------------------------------------------
