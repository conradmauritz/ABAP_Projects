*&---------------------------------------------------------------------*
*& Report  ZCFPERFCHECK
*&
*&---------------------------------------------------------------------*
*& Description:
*&   Extracts ABAP code, code inspector analysis for extracted ABAP code,
*&    background jobs, and ST10 output
*&
*& Technical description:
*&
*& More Information:
*&
*&---------------------------------------------------------------------*
*& Change log:
*& Date       Author        Action
*& 3.11.2023  DEVELOPER     Initial program
*&
*&---------------------------------------------------------------------*

REPORT zcfperfcheck.

*----------------------------------*
" DECLERATION SECTION

*----------------------------------*
" CONSTANTS

CONSTANTS:
  gc_kpi_code_inspector_programs TYPE string  VALUE 'Z%', " Used to filter which Z programs get analyzed
  gc_kpi_bgd_job_limit_in_sec    TYPE i       VALUE 0, " Set to desired threshold in seconds
  gc_output_download_path        TYPE string  VALUE 'C:\zcfperfcheck_output\', " Specify download path
  gc_output_file_extension       TYPE string  VALUE '.txt',
  gc_download_source_code        TYPE string  VALUE 'yes', " yes: download source code | no: do not download source code
  gc_output_file_name            TYPE string  VALUE 'code_ci_bgd_st10_',
  gc_field_separator             TYPE c       VALUE ';'.


*----------------------------------*
" TYPES

TYPES:
  tt_output_format TYPE STANDARD TABLE OF string.


*----------------------------------*
" DATA OBJECTS

DATA:
  gt_ci_final_list TYPE scit_alvlist.

TYPES:
  tt_st10_data       TYPE STANDARD TABLE OF abaplist,
  tt_char1024        TYPE STANDARD TABLE OF char1024,
  tt_error_messages  TYPE STANDARD TABLE OF string,
  tt_output_sections TYPE STANDARD TABLE OF string.

DATA:
  gt_tbtco_output      TYPE tt_output_format,
  gt_st10_text_content TYPE tt_char1024.

DATA:
  gv_section_divider TYPE string,
  gv_error_message   TYPE string.

DATA:
  gt_error_messages TYPE tt_error_messages.


*----------------------------------*
" MAIN LOGIC

" Utilize code inspector functionality to analyze
" all z programs and adjust content to be ready
" for useful output for further analysis
PERFORM kpi_code_inspector
  USING
    gc_kpi_code_inspector_programs
    gc_output_download_path
    gc_download_source_code
    gc_output_file_extension
    gc_output_file_name
  CHANGING
    gt_ci_final_list
    gv_section_divider
    gv_error_message
    gt_error_messages.

" Extract long running job runtime information
" based on pre-determined parameters and
" ensure that the program names are also retrieved
PERFORM kpi_bgd_jobs
  USING
    gc_kpi_bgd_job_limit_in_sec
    gc_kpi_code_inspector_programs
    gc_field_separator
  CHANGING
    gt_tbtco_output
    gv_error_message
    gt_error_messages.

" Determine which tables have an abnormally high amount
" of utilization and using SE11 functionality retrieve
" a list of the programs that are using those tables
PERFORM kpi_st10
  CHANGING gt_st10_text_content
           gv_error_message
           gt_error_messages.

" Place all of the retrieved content into a useful
" structure so that the content can be easily analyzed
PERFORM output
  USING
    gt_ci_final_list
    gt_tbtco_output
    gc_output_download_path
    gc_output_file_extension
    gt_st10_text_content
    gc_output_file_name
    gv_section_divider
    gv_error_message
    gt_error_messages.


*----------------------------------*
" SUBROUTINES

FORM kpi_code_inspector
  USING
    iv_kpi_code_inspector_programs TYPE string
    iv_output_download_path        TYPE string
    iv_download_source_code        TYPE string
    iv_output_file_extension       TYPE string
    iv_output_file_name            TYPE string
  CHANGING
    et_ci_final_list               TYPE scit_alvlist
    ev_section_divider             TYPE string
    ev_error_message               TYPE string
    et_error_messages              TYPE tt_error_messages.

  TYPES:
    BEGIN OF ts_z_programs,
      progname TYPE progname,
    END OF ts_z_programs.

  DATA:
    lt_z_programs            TYPE STANDARD TABLE OF ts_z_programs,
    lv_check_result          TYPE REF TO cl_ci_check_result,
    lv_z_program_name        TYPE progname,
    ls_list                  TYPE scit_alvlist,
    lv_output_file_extension TYPE string VALUE '.txt'.

  CLEAR:
    lt_z_programs.

  " Find a list of all Z programs in the system
  SELECT name
    FROM trdir
    INTO TABLE lt_z_programs
    WHERE name LIKE iv_kpi_code_inspector_programs AND subc = 1.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 1: No records selected from table trdir'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

    RETURN.

  ENDIF. " SY-SUBRC <> 0

  " For each Z program, execute the cl_ci_check=>single method
  LOOP AT lt_z_programs INTO lv_z_program_name.
    TRY.
        CALL METHOD cl_ci_check=>single
          EXPORTING
            p_variant_user = space
            p_variant      = 'DEFAULT'
            p_obj_type     = 'PROG'
            p_obj_name     = lv_z_program_name
          IMPORTING
            p_result       = lv_check_result.
      CATCH cx_ci_invalid_variant .
      CATCH cx_ci_invalid_object .
      CATCH cx_ci_check_error .
    ENDTRY.
    IF sy-subrc <> 0.

      CONCATENATE 'Error 2: The SAP Code Inspector Check failed for program: ' lv_z_program_name
        INTO ev_error_message.

      PERFORM collect_error_messages
        USING ev_error_message
        CHANGING et_error_messages.

    ENDIF. " SY-SUBRC <> 0

    lv_check_result->get_result( IMPORTING p_list = ls_list ).

    APPEND LINES OF ls_list TO et_ci_final_list.

    CASE iv_download_source_code.
      WHEN 'yes'.
        " Download source code for previously identified programs
        PERFORM z_program_source_code_download
          USING iv_output_download_path
                lv_z_program_name
                iv_output_file_extension
                iv_output_file_name
          CHANGING ev_error_message
                   et_error_messages.
    ENDCASE. " IC_DOWNLOAD_SOURCE_CODE

  ENDLOOP. " LT_Z_PROGRAMS INTO LV_Z_PROGRAM_NAME

ENDFORM. " KPI_CODE_INSPECTOR

FORM kpi_bgd_jobs
  USING    iv_kpi_bgd_job_limit_in_sec    TYPE i
           iv_kpi_code_inspector_programs TYPE string
           iv_field_separator             TYPE c
  CHANGING et_tbtco_output                TYPE tt_output_format
           ev_error_message               TYPE string
           et_error_messages              TYPE tt_error_messages.

  TYPES:
    BEGIN OF lts_tbtco,
      jobname        TYPE btcjob,
      programname    TYPE btcprog,
      jobcount       TYPE btcjobcnt,
      btcsystem      TYPE btctgtsys,
      strtdate       TYPE btcxdate,
      strttime       TYPE btcxtime,
      enddate        TYPE btcxdate,
      endtime        TYPE btcxtime,
      status         TYPE btcstatus,
      runtimeseconds TYPE i,
    END OF lts_tbtco.

  TYPES:
    ltt_tbtco TYPE STANDARD TABLE OF lts_tbtco.

  DATA:
    lv_output_format   TYPE string,
    lv_runtime_seconds TYPE i,
    lv_runtimeseconds  TYPE c LENGTH 10.

  DATA:
    lt_tbtco TYPE ltt_tbtco.

  FIELD-SYMBOLS:
    <ls_tbtco>  TYPE lts_tbtco.

  " Place records into table et_tbtco
  SELECT a~jobname, b~progname, a~jobcount, a~btcsystem, a~strtdate, a~strttime, a~enddate, a~endtime, a~status
    FROM tbtco AS a
    INNER JOIN tbtcp AS b
    ON a~jobname = b~jobname
    WHERE b~progname LIKE @iv_kpi_code_inspector_programs
    INTO TABLE @lt_tbtco.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 3: No data selected from TBTCO'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

    RETURN.

  ENDIF.

  " Sort table et_tbtco based on runtime in seconds descending
  SORT lt_tbtco BY runtimeseconds DESCENDING.

  " Filter rows that do not fulfill the threshold
  DELETE lt_tbtco WHERE runtimeseconds <= iv_kpi_bgd_job_limit_in_sec.

  " Prepare the output to the CSV file
  LOOP AT lt_tbtco ASSIGNING <ls_tbtco>.

    CALL FUNCTION 'SALP_SM_CALC_TIME_DIFFERENCE'
      EXPORTING
        date_1  = <ls_tbtco>-strtdate
        time_1  = <ls_tbtco>-strttime
        date_2  = <ls_tbtco>-enddate
        time_2  = <ls_tbtco>-endtime
      IMPORTING
        seconds = <ls_tbtco>-runtimeseconds.

    lv_runtime_seconds = <ls_tbtco>-runtimeseconds.

    CONCATENATE
      <ls_tbtco>-jobname
      <ls_tbtco>-programname
      <ls_tbtco>-jobcount
      <ls_tbtco>-btcsystem
      <ls_tbtco>-strtdate
      <ls_tbtco>-strttime
      <ls_tbtco>-enddate
      <ls_tbtco>-endtime
      <ls_tbtco>-status
      lv_runtimeseconds
      INTO lv_output_format
      SEPARATED BY iv_field_separator.

    APPEND lv_output_format TO et_tbtco_output.

  ENDLOOP.

ENDFORM. " KPI_BGD_JOBS

FORM kpi_st10
  CHANGING et_st10_text_content TYPE tt_char1024
           ev_error_message     TYPE string
           et_error_messages    TYPE tt_error_messages.

  DATA:
  lt_st10_output TYPE STANDARD TABLE OF abaplist.

  CALL FUNCTION 'LIST_FREE_MEMORY'.

  SUBMIT rstabl11 EXPORTING LIST TO MEMORY AND RETURN.

  CALL FUNCTION 'LIST_FROM_MEMORY'
    TABLES
      listobject = lt_st10_output
    EXCEPTIONS
      not_found  = 1
      OTHERS     = 2.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 4: Nothing in the LIST content in memory'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

    RETURN.

  ENDIF. "SY-SUBRC <> 0

  CALL FUNCTION 'LIST_TO_ASCI'
    TABLES
      listobject = lt_st10_output
      listasci   = et_st10_text_content.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 5: Unable to convert the ST10 content from LIST to ASCII'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

  CALL FUNCTION 'LIST_FREE_MEMORY'.

ENDFORM. " KPI_ST10

FORM z_program_source_code_download
  USING
    iv_output_download_path  TYPE string
    iv_z_program_name        TYPE progname
    iv_output_file_extension TYPE string
    iv_output_file_name      TYPE string
  CHANGING
    ev_error_message         TYPE string
    et_error_messages        TYPE tt_error_messages.

  DATA:
    lt_z_programs_source           TYPE TABLE OF string,
    lv_kpi_code_inspector_file_nam TYPE string,
    lv_full_path                   TYPE string,
    lv_output_file_name            TYPE string.

  DATA:
    lv_z_program_name_char TYPE c LENGTH 60.

  DATA:
    lt_output_sections TYPE STANDARD TABLE OF string.

  DATA:
    lv_date_stamp TYPE c LENGTH 10.

  " Prepare date and timestamp for file names
  WRITE:
    sy-datum TO lv_date_stamp.

  CLEAR lt_z_programs_source.

  lv_z_program_name_char = iv_z_program_name.

  " For each Z program identified, download the source code
  READ REPORT lv_z_program_name_char INTO lt_z_programs_source.
  IF sy-subrc <> 0.
    " lv_z_program_name_char is empty

    ev_error_message = 'Error 6: lv_z_program_name_char is empty'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

    RETURN.
  ENDIF. " SY-SUBRC <> 0

  " Prepare file name for z_program_source file download functionality
  REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
  CONCATENATE iv_output_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

  " Download Z programs source code
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
*     append        = 'X'
    TABLES
      data_tab      = lt_z_programs_source.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 7: Unable to download the collected Z program source code'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

ENDFORM. " Z_PROGRAM_SOURCE_CODE_DOWNLOAD

FORM output
  USING
    it_ci_final_list         TYPE scit_alvlist
    it_tbtco_output          TYPE tt_output_format
    iv_output_download_path  TYPE string
    iv_output_file_extension TYPE string
    it_st10_text_content     TYPE tt_char1024
    iv_output_file_name      TYPE string
    iv_section_divider       TYPE string
  CHANGING
    ev_error_message         TYPE string
    et_error_messages        TYPE tt_error_messages.


  DATA:
     lv_date_stamp TYPE c LENGTH 10.

  DATA:
    lv_full_path TYPE string.

  DATA:
    lt_output_sections TYPE tt_output_sections.

  " Prepare date for file name
  WRITE:
    sy-datum TO lv_date_stamp.

  " Prepare filename and file path
  REPLACE ALL OCCURRENCES OF '.' IN lv_date_stamp WITH '_'.
  CONCATENATE iv_output_download_path iv_output_file_name lv_date_stamp iv_output_file_extension INTO lv_full_path.

  " Add START_CI_SECTION section to output file
  PERFORM add_output_section
    USING 'START_CI_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
    USING lv_full_path
          lt_output_sections
          ev_error_message
    CHANGING et_error_messages.

  " Code Inspector content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_ci_final_list.
  IF sy-subrc <> 0.
    " Unable to download the code inspector content

    ev_error_message = 'Error 8: Unable to download the code inspector content'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

  " Add END_CI_SECTION section to output file
  PERFORM add_output_section
    USING 'END_CI_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
      USING lv_full_path
            lt_output_sections
            ev_error_message
      CHANGING et_error_messages.

  " Add START_BGD_SECTION section to output file
  PERFORM add_output_section
    USING 'START_BGD_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
    USING lv_full_path
          lt_output_sections
          ev_error_message
    CHANGING et_error_messages.

  " BGD jobs download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_tbtco_output.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 9: Unable to download the backgroun jobs content'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

  " Add END_BGD_SECTION section to output file
  PERFORM add_output_section
  USING 'END_BGD_SECTION'
  CHANGING lt_output_sections.

  PERFORM sections_write_to_file
   USING lv_full_path
         lt_output_sections
         ev_error_message
   CHANGING et_error_messages.

  " Add START_ST10_SECTION section to output file
  PERFORM add_output_section
    USING 'START_ST10_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
    USING lv_full_path
          lt_output_sections
          ev_error_message
    CHANGING et_error_messages.

  " ST10 content download
  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_st10_text_content.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 10: Unable to download the ST10 content'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

  " Add END_ST10_SECTION section to output file
  PERFORM add_output_section
   USING 'END_ST10_SECTION'
   CHANGING lt_output_sections.

  PERFORM sections_write_to_file
     USING lv_full_path
           lt_output_sections
           ev_error_message
     CHANGING et_error_messages.

  " Add START_ERROR_SECTION section to output file
  PERFORM add_output_section
    USING 'START_ERROR_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
    USING lv_full_path
          lt_output_sections
          ev_error_message
    CHANGING et_error_messages.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = lv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = et_error_messages.

  " Add END_ERROR_SECTION section to output file
  PERFORM add_output_section
    USING 'END_ERROR_SECTION'
    CHANGING lt_output_sections.

  PERFORM sections_write_to_file
    USING lv_full_path
          lt_output_sections
          ev_error_message
    CHANGING et_error_messages.

ENDFORM. " OUTPUT

FORM add_output_section
  USING
    iv_section_text   TYPE string
  CHANGING
    et_output_section TYPE tt_output_format.

  DATA:
    lv_section_text   TYPE string,
    lv_add_empty_line TYPE string.

  CLEAR et_output_section.

  APPEND lv_add_empty_line TO et_output_section.

  CONCATENATE '* ------ ' iv_section_text ' ------ *'
    INTO lv_section_text.
  APPEND lv_section_text TO et_output_section.

  APPEND lv_add_empty_line TO et_output_section.

ENDFORM.

FORM sections_write_to_file
  USING iv_full_path       TYPE string
        it_output_sections TYPE tt_output_sections
        ev_error_message   TYPE string
        et_error_messages  TYPE tt_error_messages.

  CALL FUNCTION 'GUI_DOWNLOAD'
    EXPORTING
      filename      = iv_full_path
      no_auth_check = 'X'
      append        = 'X'
    TABLES
      data_tab      = it_output_sections.
  IF sy-subrc <> 0.

    ev_error_message = 'Error 11: Unable to download the output section indicator content'.

    PERFORM collect_error_messages
      USING ev_error_message
      CHANGING et_error_messages.

  ENDIF. "SY-SUBRC <> 0

ENDFORM.

FORM collect_error_messages
  USING
    ev_error_message  TYPE string
  CHANGING
    et_error_messages TYPE  tt_error_messages.

  APPEND ev_error_message TO et_error_messages.

ENDFORM.
